name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      command:
        description: 'Terraform Command'
        required: true
        default: 'apply'
        type: choice
        options:
        - apply
        - destroy
  
  workflow_call:
    outputs:
      repository_url:
        description: "AWS ECR URL"
        value: ${{ jobs.terraform.outputs.output }}
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      TF_VAR_db_password:
        required: true

  pull_request:
    types:
      - closed
    paths:
      - 'terraform/**'
  push:
    paths:
      - 'terraform/**'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
    outputs:
      output: ${{ steps.tf-outputs.outputs.repository_url }}

    # Use the Bash shell and 'terraform' directory for all 'run' steps
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -diff

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

    # Generates outputs
    - name: Terraform Outputs
      id: tf-outputs
      run: |
        REPOSITORY_URL=$(terraform output -raw repository_url)
        echo "::set-output name=repository_url::$REPOSITORY_URL"

    # Run 'terraform apply' or 'terraform destroy' depending on input parameter
    - name: Terraform Apply
      if: github.event.inputs.command == 'apply'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: github.event.inputs.command == 'destroy'
      run: terraform destroy -auto-approve
